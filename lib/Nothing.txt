import 'package:flutter/material.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      theme: ThemeData(
        // This is the theme of your application.
        //
        // TRY THIS: Try running your application with "flutter run". You'll see
        // the application has a purple toolbar. Then, without quitting the app,
        // try changing the seedColor in the colorScheme below to Colors.green
        // and then invoke "hot reload" (save your changes or press the "hot
        // reload" button in a Flutter-supported IDE, or press "r" if you used
        // the command line to start the app).
        //
        // Notice that the counter didn't reset back to zero; the application
        // state is not lost during the reload. To reset the state, use hot
        // restart instead.
        //
        // This works for code too, not just values: Most code changes can be
        // tested with just a hot reload.
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
        useMaterial3: true,
      ),
      home: const MyHomePage(title: 'Flutter Demo Home Page'),
    );
  }
}

class CtaButton extends StatelessWidget {
  final String text;
  final VoidCallback? onPressed;

  const CtaButton({
    Key? key,
    required this.text,
    this.onPressed,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Container(
      width: 160,
      child: ElevatedButton(
        onPressed: onPressed,
        style: ElevatedButton.styleFrom(
          backgroundColor: const Color(0xFFEB0028),
          foregroundColor: Colors.white,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(64),
            side: const BorderSide(
              color: Colors.white,
              width: 2,
            ),
          ),
          padding: const EdgeInsets.symmetric(
            horizontal: 16,
            vertical: 13,
          ),
          elevation: 0,
        ),
        child: Text(
          text,
          style: const TextStyle(
            fontFamily: 'Poppins',
            fontSize: 20,
            fontWeight: FontWeight.w600,
            color: Colors.white,
          ),
          textAlign: TextAlign.center,
        ),
      ),
    );
  }
}

class NavigationHeader extends StatelessWidget {
  const NavigationHeader({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final screenWidth = MediaQuery.of(context).size.width;
    final isSmallScreen = screenWidth <= 991;

    return Container(
      width: double.infinity,
      color: const Color(0xFF0F0F0F).withOpacity(0.05),
      padding: EdgeInsets.symmetric(
        horizontal: isSmallScreen ? 20 : 64,
        vertical: 8,
      ),
      child: isSmallScreen ? _buildMobileLayout() : _buildDesktopLayout(),
    );
  }

  Widget _buildDesktopLayout() {
    return Row(
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      children: [
        Image.network(
          'https://cdn.builder.io/api/v1/image/assets/TEMP/b2176fc13995df19e6f08a415d1b85f2d4b4235f?placeholderIfAbsent=true&apiKey=e3b7908274d7429298c0e1d85455a352',
          width: 253,
          height: 253 / 4.52,
          fit: BoxFit.contain,
        ),
        Row(
          children: [
            _buildNavItem('Home'),
            const SizedBox(width: 40),
            _buildNavItem('Speakers'),
            const SizedBox(width: 40),
            _buildNavItem('Sponsor'),
            const SizedBox(width: 40),
            _buildNavItem('About'),
            const SizedBox(width: 40),
            CtaButton(
              text: 'Get tickets',
              onPressed: () {},
            ),
          ],
        ),
      ],
    );
  }

  Widget _buildMobileLayout() {
    return Column(
      children: [
        Image.network(
          'https://cdn.builder.io/api/v1/image/assets/TEMP/b2176fc13995df19e6f08a415d1b85f2d4b4235f?placeholderIfAbsent=true&apiKey=e3b7908274d7429298c0e1d85455a352',
          width: 253,
          height: 253 / 4.52,
          fit: BoxFit.contain,
        ),
        const SizedBox(height: 20),
        Wrap(
          spacing: 20,
          runSpacing: 10,
          alignment: WrapAlignment.center,
          children: [
            _buildNavItem('Home'),
            _buildNavItem('Speakers'),
            _buildNavItem('Sponsor'),
            _buildNavItem('About'),
            CtaButton(
              text: 'Get tickets',
              onPressed: () {},
            ),
          ],
        ),
      ],
    );
  }

  Widget _buildNavItem(String text) {
    return Container(
      padding: const EdgeInsets.all(10),
      child: Text(
        text,
        style: const TextStyle(
          fontFamily: 'Inter',
          fontSize: 20,
          fontWeight: FontWeight.w400,
          color: Colors.white,
        ),
      ),
    );
  }
}

class HeroSection extends StatelessWidget {
  const HeroSection({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final screenWidth = MediaQuery.of(context).size.width;
    final isSmallScreen = screenWidth <= 991;

    return Container(
      width: double.infinity,
      constraints: const BoxConstraints(minHeight: 900),
      padding: EdgeInsets.symmetric(
        horizontal: isSmallScreen ? 20 : 330,
        vertical: isSmallScreen ? 100 : 108,
      ),
      child: Column(
        mainAxisAlignment: MainAxisAlignment.start,
        children: [
          Image.network(
            'https://cdn.builder.io/api/v1/image/assets/TEMP/2bcc689c9cc68a61e6eb8ff51e8672917404c281?placeholderIfAbsent=true&apiKey=e3b7908274d7429298c0e1d85455a352',
            width: 300,
            height: 300 / 1.05,
            fit: BoxFit.contain,
          ),
          SizedBox(height: isSmallScreen ? 40 : 50),
          _buildMainTitle(isSmallScreen),
          SizedBox(height: isSmallScreen ? 40 : 50),
          _buildSubtitle(),
          SizedBox(height: isSmallScreen ? 40 : 50),
          CtaButton(
            text: 'Get tickets',
            onPressed: () {},
          ),
        ],
      ),
    );
  }

  Widget _buildMainTitle(bool isSmallScreen) {
    return RichText(
      textAlign: TextAlign.center,
      text: TextSpan(
        style: TextStyle(
          fontFamily: 'Playfair Display',
          fontSize: isSmallScreen ? 40 : 64,
          fontWeight: FontWeight.w700,
          color: const Color(0xFFEEEEEE),
          height: 1.2,
        ),
        children: [
          const TextSpan(
            text: 'Between ',
            style: TextStyle(fontWeight: FontWeight.w400),
          ),
          const TextSpan(
            text: 'Light',
            style: TextStyle(
              fontFamily: 'Lora',
              fontWeight: FontWeight.w400,
              fontStyle: FontStyle.italic,
              color: Color(0xFFF5DEB3),
            ),
          ),
          const TextSpan(
            text: ' and ',
            style: TextStyle(fontWeight: FontWeight.w400),
          ),
          const TextSpan(
            text: 'Shadow',
            style: TextStyle(
              fontFamily: 'Lora',
              fontWeight: FontWeight.w400,
              fontStyle: FontStyle.italic,
              color: Color(0xFF888888),
            ),
          ),
          const TextSpan(text: '\n'),
          const TextSpan(
            text: 'Lies the Spectrum of Ideas',
            style: TextStyle(fontWeight: FontWeight.w400),
          ),
        ],
      ),
    );
  }

  Widget _buildSubtitle() {
    return Text(
      'An exploration of duality through the worlds of Kafka and Tolstoy',
      style: const TextStyle(
        fontFamily: 'Roboto',
        fontSize: 20,
        fontWeight: FontWeight.w400,
        color: Color(0xFFBBBBBB),
      ),
      textAlign: TextAlign.center,
    );
  }
}

class AuthorSection extends StatelessWidget {
  final String imageUrl;
  final String authorName;
  final String quote;
  final String description;
  final bool isReversed;
  final bool isDarkTheme;

  const AuthorSection({
    Key? key,
    required this.imageUrl,
    required this.authorName,
    required this.quote,
    required this.description,
    this.isReversed = false,
    this.isDarkTheme = true,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final screenWidth = MediaQuery.of(context).size.width;
    final isSmallScreen = screenWidth <= 991;

    return Container(
      width: double.infinity,
      padding: EdgeInsets.symmetric(
        horizontal: isSmallScreen ? 20 : 127,
        vertical: isSmallScreen ? 100 : (isDarkTheme ? 100 : 142),
      ),
      child: isSmallScreen ? _buildMobileLayout() : _buildDesktopLayout(),
    );
  }

  Widget _buildDesktopLayout() {
    final widgets = [
      _buildImage(),
      _buildContent(),
    ];

    return Row(
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      crossAxisAlignment: CrossAxisAlignment.center,
      children: isReversed ? widgets.reversed.toList() : widgets,
    );
  }

  Widget _buildMobileLayout() {
    return Column(
      children: [
        _buildImage(),
        const SizedBox(height: 40),
        _buildContent(),
      ],
    );
  }

  Widget _buildImage() {
    return Container(
      width: 500,
      height: 500,
      constraints: const BoxConstraints(minWidth: 240),
      child: Image.network(
        imageUrl,
        fit: BoxFit.contain,
      ),
    );
  }

  Widget _buildContent() {
    final screenWidth = MediaQuery.of(context).size.width;
    final isSmallScreen = screenWidth <= 991;

    return Container(
      width: 588,
      constraints: const BoxConstraints(minWidth: 240),
      padding: const EdgeInsets.symmetric(horizontal: 2),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.center,
        children: [
          Text(
            authorName,
            style: TextStyle(
              fontFamily: 'Poppins',
              fontSize: isSmallScreen ? 40 : 64,
              fontWeight: FontWeight.w600,
              color: isDarkTheme
                  ? const Color(0xFFF2F2F2)
                  : const Color(0xFF1A1A1A),
            ),
            textAlign: TextAlign.center,
          ),
          const SizedBox(height: 20),
          Padding(
            padding: EdgeInsets.symmetric(
              horizontal: isDarkTheme ? 0 : 36,
            ),
            child: Text(
              quote,
              style: TextStyle(
                fontFamily: 'Lora',
                fontSize: 24,
                fontWeight: FontWeight.w400,
                color: isDarkTheme
                    ? const Color(0xFFD0D0D0)
                    : const Color(0xFF333333),
              ),
              textAlign: TextAlign.center,
            ),
          ),
          const SizedBox(height: 20),
          Text(
            description,
            style: TextStyle(
              fontFamily: 'Lora',
              fontSize: 18,
              fontWeight: FontWeight.w400,
              color: isDarkTheme
                  ? const Color(0xFFCCCCCC)
                  : const Color(0xFF2A2A2A),
            ),
            textAlign: TextAlign.center,
          ),
        ],
      ),
    );
  }
}

class TedxHomepage extends StatelessWidget {
  const TedxHomepage({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color(0xFF0F0F0F),
      body: SingleChildScrollView(
        child: Column(
          children: [
            const NavigationHeader(),
            const HeroSection(),
            AuthorSection(
              imageUrl:
                  'https://cdn.builder.io/api/v1/image/assets/TEMP/7e5f1a3fe5f51ef0859dc00ebf37732d0c1b3f94?placeholderIfAbsent=true&apiKey=e3b7908274d7429298c0e1d85455a352',
              authorName: 'KAFKA',
              quote: '"I am a cage, in search of a bird."',
              description:
                  'Franz Kafka\'s writing dives into the shadows of the human mind — surreal, unsettling, and deeply psychological. His stories often explore fear, alienation, and the absurdity of modern life, pulling readers into dreamlike worlds where reality feels fragile.',
              isDarkTheme: true,
            ),
            Container(
              color: Colors.white,
              child: AuthorSection(
                imageUrl:
                    'https://cdn.builder.io/api/v1/image/assets/TEMP/bbc136151ba068be2e5741919820d3d87321a619?placeholderIfAbsent=true&apiKey=e3b7908274d7429298c0e1d85455a352',
                authorName: 'Tolstoy',
                quote: '"The sole meaning of life is to serve humanity."',
                description:
                    'Leo Tolstoy\'s works reflect the light of humanity — thoughtful, moral, and deeply emotional. His stories portray real people facing real choices, filled with rich detail and a profound search for truth, love, and the meaning of life.',
                isReversed: true,
                isDarkTheme: false,
              ),
            ),
          ],
        ),
      ),
    );
  }
}
